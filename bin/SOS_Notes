#!/usr/bin/env bash
# _____             _                 _____ _____ 
#|   __|___ ___ ___| |_ ___ _ _ _____|     |   __|
#|__   | . | -_|  _|  _|  _| | |     |  |  |__   |
#|_____|  _|___|___|_| |_| |___|_|_|_|_____|_____|
#      |_|   
# SpectrumOS - Embrace the Chromatic Symphony!
# By: gibranlp <thisdoesnotwork@gibranlp.dev>
# MIT licence 
# 
#
# Set default applications
EDITOR=nvim
VIEW=/usr/bin/zathura-pywal
TERMINAL=alacritty

# <<------ Directories ------>> #
book_library="$HOME/books/"
note_library="$HOME/notable/"
article_library="$HOME/Articles/"

# <<------ Main ------>> #
create_document() {
  # Use rofi to prompt the user to select the type of document to create
  document_type=$(echo -e "Markdown\nLaTeX" | rofi -dmenu -i -p "Type of Note?" -theme "~/.config/rofi/left.rasi")

  # Check if the user cancelled the prompt
  if [ -z "$document_type" ]; then
    return
  fi

  # Set template and extension based on document type
  case "$document_type" in
    Markdown)
      template="TemplateMarkdown.md"
      EXTENSION="md"
      message="New Markdown Note!"
      ;;
    LaTeX)
      template="TemplateLaTeX.tex"
      EXTENSION="tex"
      message="New LaTeX Note!"
      ;;
    *)
      echo "Invalid option"
      return 1
      ;;
  esac

  # Use rofi to prompt the user to enter a name for the note
  cn_name=$(rofi -dmenu -p "Note Name:" -theme "~/.config/rofi/left.rasi")

  # Check if the user cancelled the prompt
  if [ -z "$cn_name" ]; then
    return
  fi

  # Check if the file already exists
  if [ -f "$directory/$cn_name.$EXTENSION" ]; then
    # Prompt the user to confirm if they want to overwrite the file
    if ! (echo -e "Yes\nNo" | rofi -dmenu -p "Note exists. Overwrite?" -theme "~/.config/rofi/left.rasi" | grep -q "Yes"); then
      return
    fi
  fi

  # Notify the user and open the new document in the editor
  notify-send -a " SpectrumOS" "$message"
  cp "$directory/Templates/$template" "$directory/$cn_name.$EXTENSION"
  "$TERMINAL" -e "$EDITOR" "$directory/$cn_name.$EXTENSION"
}

open_document() {
  # Search for PDF, EPUB, and MOBI files and open the selected one with the viewer
  document=$(rg --files --iglob "*.pdf" --iglob "*.epub" --iglob "*.mobi" $directory)
  selected_document=$(echo "$document" | rofi -dmenu -i -p " Open:" -theme "~/.config/rofi/left.rasi")
  if [[ -n $selected_document ]]; then
    $VIEW "$selected_document"
  fi
}

edit_notes() {
  # Search for Markdown, Wiki, and LaTeX files and open the selected one in the editor
  document=$(rg --files --iglob "*.md" --iglob "*.wiki" --iglob "*.tex" $directory)
  selected_document=$(echo "$document" | rofi -dmenu -i -p " Open:" -theme "~/.config/rofi/shortcuts.rasi")
  if [[ -n $selected_document ]]; then
    $TERMINAL -e $EDITOR "$selected_document"
  fi
}

download_books() {
  # Prompt the user to enter a book name and download it using libby
  bookname=$(echo "" | rofi -dmenu -p "Enter book name:" -theme "~/.config/rofi/left.rasi")
  if [ -z "$bookname" ]; then
      echo "No book name entered"
      exit 1
  fi

  # Open a terminal to download the book
  $TERMINAL -T "dropbooks" -e bash -c ". ~/.zshrc; libby $bookname"
}

main() {
  # Prompt the user to select "Library" or "Articles" using rofi
  selected_dir=$(echo -e " Create Note\n View Notes\n Library\n Articles\n Download Books" | rofi -dmenu -i -p " Choose:" -theme "~/.config/rofi/left.rasi")

  # Set the directory based on the user's selection and perform the corresponding action
  if [[ -n $selected_dir ]]; then
      case $selected_dir in
          " Create Note")
              directory=$note_library
              create_document
              ;;
          " View Notes")
              directory=$note_library
              edit_notes
              ;;
          " Library")
              directory=$book_library
              open_document
              ;;
          " Articles")
              directory=$article_library
              open_document
              ;;
          " Download Books")
              download_books
              ;;
      esac
  else
    exit 0
  fi
}

# Run the main function
main
