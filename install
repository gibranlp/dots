#!/usr/bin/env bash
# _____             _                 _____ _____ 
#|   __|___ ___ ___| |_ ___ _ _ _____|     |   __|
#|__   | . | -_|  _|  _|  _| | |     |  |  |__   |
#|_____|  _|___|___|_| |_| |___|_|_|_|_____|_____|
#      |_|   
# SpectrumOS - Embrace the Chromatic Symphony!
# By: gibranlp <thisdoesnotwork@gibranlp.dev>
# MIT licence 
# 
#
# Install Base Packages
function install_base() {
    packets=(
        'xorg-server' 'xorg-xinit' 'xorg-xrandr' 'feh' 'unclutter' 'fuse-exfat'
        'base-devel' 'alsa-utils' 'pulseaudio-alsa' 'pavucontrol' 'openssh'
        'alacritty' 'xcolor' 'playerctl' 'scrot' 'flameshot' 'rofi' 'surfraw'
        'python-pip' 'ranger' 'lxappearance' 'bmon' 'acpilight' 'lm_sensors'
        'nm-connection-editor' 'arandr' 'ttf-nerd-fonts-symbols' 'python-psutil' 'python-xdg'
        'python-iwlib' 'python-dateutil' 'ueberzug' 'xsettingsd' 'zsh' 'dunst'
        'tk' 'transmission-cli' 'imagemagick' 'vlc' 'kdeconnect' 'reflector' 'rsync' 'curl'
        'cmus' 'bc' 'neofetch' 'firefox' 'xorg-xkill' 'xdg-user-dirs' 'bluez'
        'bluez-tools' 'bluez-utils' 'ripgrep' 'blueman' 'htop' 'jp2a' 'locate'
        'os-prober' 'gnome-disk-utility' 'networkmanager' 'unzip' 'xarchiver'
        'tlp' 'gvfs' 'barrier' 'noto-fonts' 'noto-fonts-cjk' 'noto-fonts-emoji'
        'ttf-dejavu' 'ttf-liberation' 'ttf-opensans' 'libayatana-appindicator'
        'tumbler' 'redshift' 'libmicrodns' 'protobuf' 'neovim' 'xorg-xdpyinfo'
        'fd' 'fzf' 'cups' 'thefuck' 'pamixer' 'gvfs-mtp' 'gvfs-nfs' 'gvfs-smb'
        'exa' 'xclip' 'xdotool' 'cups-pdf' 'man' 'avahi' 'xorg-server-xephyr' 'conky' 
        'peek' 'libreoffice-fresh' 'anytype-bin' 'picom' 'luarocks' 'neovim' 'python-dbus'
        'xsel' 'xcopy'
    )

    for packet in "${packets[@]}"; do
        echo "Instalando --> ${packet}"
        sudo pacman -S "${packet}" --noconfirm --needed
    done
}

# Install Paru AUR Helper
function install_paru(){
  git clone https://aur.archlinux.org/paru.git 
  cd paru 
  makepkg -si --noconfirm
  cd ..
  rm -rf paru
} 

# Install variables
function install_variables(){
    cp -v ~/dots/variables.sh ~/
}

# Install VIM - IDE
function install_nvim(){
    git clone https://github.com/LazyVim/starter ~/.config/nvim
    mkdir -p ~/.config/nvim/autoload
    mkdir -p ~/.config/nvim/lua/plugins/
    cp ~/dots/nvim/lua/plugins/colorscheme.lua ~/.config/nvim/lua/plugins
    rm -rf ~/.config/nvim/.git
    nvim
}

# Install AUR Packages
function install_aur_packages() {
    packets=(
        'qtile-git' 'ponymix' 'farge' 'qtile-extras-git' 'caffeine'
        'visual-studio-code-bin' 'pulseaudio-bluetooth' 'telegram-desktop'
        'google-chrome' 'wpgtk-git' 'insect' 'cava-git' 'thunar-extended'
        'thunar-volman' 'thunar-archive-plugins' 'hugo' 'gromit-mpx-git' 'nbfc' 'ntfs-3g'
        'i3lock-color' 'i3lock-fancy-git' 'lazy-docker'
        'rofi-emoji' 'zathura-pdf-mupdf' 'zathura-pywal-git' 'zathura-ps'
        'python-rofi-git' 'sptlrx-bin'
        'rofi-file-browser-extended-git' 'walogram' 'ttf-courier-prime'
        'whatsdesk-bin' 'lyrics-in-terminal'  'zen-browser-bin' 'minder-git'
        'gowall'
    )

    for packet in "${packets[@]}"; do
        echo "Instalando --> ${packet}"
        paru -S "${packet}" --noconfirm
    done
}

# Function to install Pip packages

function install_pip(){
    pip install -r pip_dependencies.txt --break-system-packages --ignore-requires-python
}

## Actualizar Grub
function grub_update(){
# Archivo de configuración de GRUB
GRUB_CONFIG="/etc/default/grub"

# Imagen de fondo para GRUB
BACKGROUND_IMAGE="/usr/local/backgrounds/background.png"

# Verificar si el archivo de configuración de GRUB existe
if [ -f "$GRUB_CONFIG" ]; then
    # Asegurarse de que la imagen de fondo tenga permisos correctos
    sudo chmod +r $BACKGROUND_IMAGE

    # Agregar o modificar la línea GRUB_CMDLINE_LINUX_DEFAULT
    if grep -q "^GRUB_CMDLINE_LINUX_DEFAULT" "$GRUB_CONFIG"; then
        sudo sed -i 's/^GRUB_CMDLINE_LINUX_DEFAULT="\(.*\)"/GRUB_CMDLINE_LINUX_DEFAULT="\1 quiet splash"/' "$GRUB_CONFIG"
    else
        echo 'GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"' | sudo tee -a "$GRUB_CONFIG"
    fi

    # Agregar o modificar la línea GRUB_GFXMODE
    if grep -q "^GRUB_GFXMODE" "$GRUB_CONFIG"; then
        sudo sed -i 's/^GRUB_GFXMODE=.*/GRUB_GFXMODE=auto/' "$GRUB_CONFIG"
    else
        echo 'GRUB_GFXMODE=auto' | sudo tee -a "$GRUB_CONFIG"
    fi

    # Agregar o modificar la línea GRUB_BACKGROUND
    if grep -q "^GRUB_BACKGROUND" "$GRUB_CONFIG"; then
        sudo sed -i "s|^GRUB_BACKGROUND=.*|GRUB_BACKGROUND=\"$BACKGROUND_IMAGE\"|" "$GRUB_CONFIG"
    else
        echo "GRUB_BACKGROUND=\"$BACKGROUND_IMAGE\"" | sudo tee -a "$GRUB_CONFIG"
    fi

    # Agregar o modificar la línea GRUB_TERMINAL_OUTPUT
    if grep -q "^GRUB_TERMINAL_OUTPUT" "$GRUB_CONFIG"; then
        sudo sed -i 's/^GRUB_TERMINAL_OUTPUT=.*/GRUB_TERMINAL_OUTPUT=gfxterm/' "$GRUB_CONFIG"
    else
        echo 'GRUB_TERMINAL_OUTPUT=gfxterm' | sudo tee -a "$GRUB_CONFIG"
    fi

    # Agregar o modificar la línea GRUB_DISABLE_OS_PROBER
    if grep -q "^GRUB_DISABLE_OS_PROBER" "$GRUB_CONFIG"; then
        sudo sed -i 's/^GRUB_DISABLE_OS_PROBER=.*/GRUB_DISABLE_OS_PROBER=false/' "$GRUB_CONFIG"
    else
        echo 'GRUB_DISABLE_OS_PROBER=false' | sudo tee -a "$GRUB_CONFIG"
    fi

    # Actualizar la configuración de GRUB
    sudo grub-mkconfig -o /boot/grub/grub.cfg

    echo "Configuración de GRUB actualizada correctamente."
else
    echo "El archivo de configuración de GRUB no existe: $GRUB_CONFIG"
    exit 1
fi
}

# Install bin scripts Files
function install_bin(){
    mkdir -pv ~/.local/bin
    cd ~/.local/bin
    rm -rfv *
    mkdir -p ~/.local/bin
    cp -ruv ~/dots/bin/* ~/.local/bin
    if [ "$(ls -A ~/.local/bin)" ]; then
        chmod +x ~/.local/bin/*
    fi
}

# Qtile files
function install_qtile(){
    mkdir -pv ~/.config/qtile
    cd ~/.config/qtile
    rm -rfv *
    cp -rv ~/dots/qtile/* ~/.config/qtile/
}

# Alacritty
function install_alacritty(){
    # Alacritty
    mkdir -p ~/.config/alacritty
    cp -v ~/dots/alacritty/alacritty.toml ~/.config/alacritty
}

# Copy ZSH Files
function install_zsh(){
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    git clone https://github.com/zsh-users/zsh-autosuggestions.git ~/.oh-my-zsh/plugins/zsh-autosuggestions
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/plugins/zsh-syntax-highlighting
    sudo chsh -s $(which zsh) gibranlp
    cp -v ~/dots/zsh/.zshrc ~/
    cp -v ~/dots/oh-my-zsh/* ~/.oh-my-zsh/themes/
}

# Copy Picom Files
function install_picom(){
    # Picom
    mkdir -p ~/.config/picom
    cp -v ~/dots/picom/picom.conf ~/.config/picom
}

# Copy Fonts
function install_fonts(){
    # Copy Fonts
    mkdir -pv  ~/.fonts
    mkdir -pv ~/.local/share/fonts
    cp -v ~/dots/fonts/* ~/.fonts
    cp -v ~/dots/fonts/* ~/.local/share/fonts
    sudo cp -v ~/dots/fonts/* /usr/local/share/fonts
    fc-cache -f -v
}

# Copy Depenendencies
function install_dependencies(){
    cp -rv ~/dots/cache/* ~/.cache/
    # Shortcuts
    cp -v .shortcuts ~/

    # Logo Cli
    cp -v ~/dots/logo_cli.png ~/

    # Enable Touchpad in Laptops
    sudo cp -v ~/dots/touchpad/30-touchpad.conf /etc/X11/xorg.conf.d/

    # Copy Gromit config file
    cp -v ~/dots/gromit-mpx/* ~/.config/

    # Generate all Folders
    mkdir -pv ~/Documents ~/Public ~/Downloads ~/notable ~/books ~/Articles

}

# Copy Wallpapers
function install_wallpapers(){
    mkdir -p ~/Pictures/Wallpapers
    sudo mkdir -pv /usr/local/backgrounds
    sudo chown -R $USER:$USER /usr/local/backgrounds
    sudo cp -v ~/dots/Wallpapers/wall1.png /usr/local/backgrounds/background.png
    cp -v ~/dots/Wallpapers/* ~/Pictures/Wallpapers
}

# Install Plymouth
function install_plymouth(){
  paru -S plymouth-git --noconfirm
  sudo cp -rv ~/dots/plymouth/themes/spectrumos /usr/share/plymouth/themes/
  sudo plymouth-set-default-theme -R spectrumos
  sudo mkinitcpio -P
}

# Install gowall
function install_gowall(){
  mkdir -p ~/.config/gowall
  cp ~/dots/gowall/config.yml ~/.config/gowall
  }

# Copy Dunst Files
function install_dunst(){
    mkdir -pv ~/.config/wal/templates
    mkdir -pv ~/.config/dunst
    cp -v ~/dots/dunst/dunstrc ~/.config/wal/templates/
}

# Copy Dunst Files
function install_vesktop(){
    cp ~/dots/Vesktop/colors-discord.css ~/.config/wal/templates
    ln -s $HOME/.cache/wal/colors-discord.css $HOME/.config/vesktop/themes/pywal-vencord.theme.css
}

# Function to install Lightdm
function install_lightdm(){
    sudo pacman -S lightdm lightdm-webkit2-greeter --noconfirm
    sudo cp -v ~/dots/lightdm/lightdm.conf /etc/lightdm/
    sudo cp -v ~/dots/lightdm/lightdm-webkit2-greeter.conf /etc/lightdm/
    sudo cp -v ~/dots/lightdm/lightdm-gtk-greeter.conf /etc/lightdm
    sudo rm -rf /usr/share/lightdm-webkit/themes/SpectrumOS
    sudo cp -rv ~/dots/lightdm/theme/SpectrumOS /usr/share/lightdm-webkit/themes/
    sudo cp -v ~/.cache/wal/colors.css /usr/share/lightdm-webkit/themes/SpectrumOS/css/
    sudo mkdir -pv /usr/local/themes
    sudo cp -rv ~/.local/share/themes/FlatColor /usr/local/themes
    sudo chown -R $USER:$USER /usr/local/themes/FlatColor
    sudo ln -s /usr/local/themes/FlatColor /usr/share/themes/FlatColor
    sudo cp ~/.cache/wal/colors.css /usr/share/lightdm-webkit/themes/SpectrumOS/css/
    sudo mkdir -pv /usr/share/fonts/la-machine-company
    sudo cp -v ~/dots/fonts/LaMachine.ttf /usr/share/fonts/la-machine-company/
    fc-cache -f -v
    
}

# Function to install Rofi files
function install_rofi(){
    mkdir -pv ~/.config/wal/templates
    mkdir -pv ~/.config/rofi
    cd ~/.config/rofi
    rm -rfv *
    cp -v ~/dots/rofi/SOS_Colors.rasi ~/.config/wal/templates/
    cp -v ~/dots/rofi/*.rasi ~/.config/rofi/
    sudo mkdir -pv /root/.config/rofi
    sudo mkdir -pv /root/.cache/wal
    sudo cp -v ~/dots/rofi/SOS_Launcher.rasi /root/.config/rofi/
}

# Copy Cava Files
function install_cava(){
    mkdir -pv ~/.config/wal/templates
    mkdir -pv ~/.config/cava
    cp -v ~/dots/cava/config ~/.config/wal/templates/
}

# Copy Flameshot Files
function install_flameshot(){
    mkdir -pv ~/.config/wal/templates
    mkdir -pv ~/.config/flameshot
    cp -v ~/dots/flameshot/flameshot.ini ~/.config/wal/templates/

}

# Copy Thunar Config Files
function install_thunar(){
    mkdir -pv ~/.config/gtk-3.0
    cp -v ~/dots/gtk-3.0/* ~/.config/gtk-3.0/
}

# Copy Neofetch Files

function install_neofetch(){
    mkdir -pv ~/.config/neofetch
    cp -v ~/dots/neofetch/config.conf ~/.config/neofetch/
}

# Copy Ranger Files
function install_ranger(){
    mkdir -pv ~/.config/ranger
    cp -v ~/dots/ranger/rc.conf ~/.config/ranger/
}

# Install Conky
function install_conky(){
    mkdir -pv ~/.config/conky
    cp -v ~/dots/conky/date ~/.config/wal/templates
}


# Function to display usage information
function usage() {
    echo "Usage: $0 [--bin] [--qtile] [--alacritty] [--zsh] [--picom] [--dependencies] [--wallpapers] [--lightdm] [--rofi] [--dunst]"
    exit 1
}

# Copy Xsettingsd Files
function install_xsettings(){
    mkdir -pv ~/.config/xsettingsd
    cp -v ~/dots/xsettingsd/xsettingsd.conf ~/.config/xsettingsd/
}

# Copy Pulseaudio Files
function install_pulseaudio(){
    sudo cp ~/dots/pulseaudio/system.pa /etc/pulse/system.pa
}

# Post Operations 
function post_operations(){
  wpg-install.sh -gio
  sudo usermod -aG network $USER
  sudo timedatectl set-ntp true
  xdg-settings set default-web-browser zen.desktop
  
  sudo localectl set-x11-keymap us pc105 intl
  sudo localectl set-x11-keymap us intl

  setxkbmap -layout us -variant intl
  #timedatectl set-timezone America/Mexico_City
  
  sudo systemctl enable bluetooth.service
  sudo systemctl start bluetooth.service
  sudo systemctl enable sshd.service
  sudo systemctl start sshd.service
  sudo systemctl enable tlp.service
  journalctl --vacuum-size=100M
  journalctl --vacuum-time=2weeks
  timedatectl set-local-rtc
  
}

# Install Docker 
function install_docker(){
  sudo pacman -S docker docker-buildx docker-compose --noconfirm --needed
  sudo systemctl enable docker.service
  sudo usermod -aG docker $USER
}

## Install Optimus
function install_optimus(){
  sudo pacman -S nvidia nvidia-utils xf86-video-intel bumblebee mesa --noconfirm
  sudo systemctl enable bumblebeed
  sudo systemctl start bumblebeed
  sudo gpasswd -a $USER bumblebee
  sudo pacman -S primus --noconfirm
}

# Function to install Latex

function install_latex(){
    sudo pacman -S texlive-core texlive-bin texlive-latexextra biber --noconfirm
}

# Function to Install Steam on Nvidia

function install_steam(){
    sudo pacman -S --needed nvidia-utils lib32-nvidia-utils nvidia-settings vulkan-icd-loader lib32-vulkan-icd-loaderparu game-devices-udev
}

# Function to run all installation steps
function run_all() {
    install_alacritty
    install_aur_packages
    install_base
    install_bin
    install_cava
    install_dependencies
    install_docker
    install_dunst
    install_flameshot
    grub_update
    install_lightdm
    install_neofetch
    install_optimus
    install_paru
    install_picom
    install_plymouth
    post_operations
    install_pulseaudio
    install_qtile
    install_ranger
    install_rofi
    install_thunar
    install_wallpapers
    install_xsettings
}

# Function to display usage information
function usage() {
    echo "Usage: $0 [--all] [--alacritty] [--aur-packages] [--base] [--bin] [--cava] [--dependencies] [--docker] [--dunst] [--fonts] [--gowall] [--latex] [--pip] [--flameshot] [--grub] [--lightdm] [--neofetch] [--nvim] [--optimus] [--paru] [--picom] [--plymouth] [--post] [--pulseaudio] [--qtile] [--ranger] [--rofi] [--thunar] [--wallpapers] [--xsettings] [--update]"
    exit 1
}

# Main script execution
if [ $# -eq 0 ]; then
    usage
fi

for arg in "$@"; do
    case $arg in
        --all)
            run_all
            ;;
        --alacritty)
            install_alacritty
            ;;
        --aur-packages)
            install_aur_packages
            ;;
        --base)
            install_base
            ;;
        --bin)
            install_bin
            ;;
        --cava)
            install_cava
            ;;
        --conky)
            install_conky
            ;;
        --dependencies)
            install_dependencies
            ;;
        --docker)
            install_docker
            ;;
        --dunst)
            install_dunst
            ;;
        --flameshot)
            install_flameshot
            ;;
        --fonts)
            install_fonts
            ;;
        --gowall)
            install_gowall
            ;;
        --grub)
            grub_update
            ;;
        --latex)
            install_latex
            ;;
        --lightdm)
            install_lightdm
            ;;
        --neofetch)
            install_neofetch
            ;;
         --nvim)
            install_nvim
            ;;
        --optimus)
            install_optimus
            ;;
        --paru)
            install_paru
            ;;
        --picom)
            install_picom
            ;;
        --pip)
            install_pip
            ;;
        --plymouth)
            install_plymouth
            ;;
        --post)
            post_operations
            ;;
        --pulseaudio)
            install_pulseaudio
            ;;
        --qtile)
            install_qtile
            ;;
        --ranger)
            install_ranger
            ;;
        --rofi)
            install_rofi
            ;;
        --thunar)
            install_thunar
            ;;
        --var)
            install_variables
            ;;
        --vim)
            install_vim
            ;;
        --wallpapers)
            install_wallpapers
            ;;
        --xsettings)
            install_xsettings
            ;;
        --update)
            install_qtile
            install_bin
            install_rofi
            install_dunst
        ;;
        --zsh)
            install_zsh
        ;;
        *)
            echo "Invalid option: $arg"
            usage
            ;;
    esac
done
